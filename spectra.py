import astropy.units as u
import numpy as np

def convert_to_namedtuple(dictionary, name='GenericNamedTuple'):
    """Converts a dictionary to a named tuple."""
    from collections import namedtuple
    return namedtuple(name, dictionary.keys())(**dictionary)


# ------------------------------------------------------------------
# The Auger spectrum from ICRC 2013
# ------------------------------------------------------------------
auger2013 = np.array([
    [0  , 17.55 , 7.32870e+37 , 7.55145e+35 , 7.62995e+35],
    [1  , 17.65 , 7.02267e+37 , 8.99818e+35 , 9.11465e+35],
    [2  , 17.75 , 6.55519e+37 , 1.07012e+36 , 1.08780e+36],
    [3  , 17.85 , 6.27534e+37 , 1.31974e+36 , 1.34790e+36],
    [4  , 17.95 , 5.78717e+37 , 1.59983e+36 , 1.64484e+36],
    [5  , 18.05 , 5.08546e+37 , 8.92247e+35 , 9.01008e+35],
    [6  , 18.15 , 5.49497e+37 , 1.07240e+36 , 1.08084e+36],
    [7  , 18.25 , 4.87529e+37 , 1.08639e+36 , 1.10004e+36],
    [8  , 18.35 , 4.44016e+37 , 1.18476e+36 , 1.19708e+36],
    [9  , 18.45 , 4.37830e+37 , 2.04192e+35 , 2.05213e+35],
    [10 , 18.55 , 4.15646e+37 , 2.41129e+35 , 2.42517e+35],
    [11 , 18.65 , 3.94101e+37 , 2.69047e+35 , 2.71504e+35],
    [12 , 18.75 , 3.95467e+37 , 3.45685e+35 , 3.49789e+35],
    [13 , 18.85 , 4.28428e+37 , 4.59651e+35 , 4.66286e+35],
    [14 , 18.95 , 4.61634e+37 , 6.03035e+35 , 6.13570e+35],
    [15 , 19.05 , 5.07253e+37 , 7.98360e+35 , 8.15093e+35],
    [16 , 19.15 , 5.40973e+37 , 1.03955e+36 , 1.06670e+36],
    [17 , 19.25 , 5.52241e+37 , 1.32572e+36 , 1.36784e+36],
    [18 , 19.35 , 5.71612e+37 , 1.69746e+36 , 1.76420e+36],
    [19 , 19.45 , 5.44773e+37 , 2.08267e+36 , 2.19232e+36],
    [20 , 19.55 , 5.62200e+37 , 2.70965e+36 , 2.89345e+36],
    [21 , 19.65 , 3.87293e+37 , 2.78737e+36 , 3.08201e+36],
    [22 , 19.75 , 2.82613e+37 , 3.09966e+36 , 3.34086e+36],
    [23 , 19.85 , 2.34187e+37 , 3.49305e+36 , 4.16117e+36],
    [24 , 19.95 , 7.45881e+36 , 4.61495e+36 , 3.37345e+36],
    [25 , 20.05 , 4.68462e+36 , 2.54073e+36 , 4.53435e+36],
    [26 , 20.15 , 2.45633e+36 , 2.02806e+36 , 5.62138e+36],
]).T

auger2013 = {'energy':    (10**auger2013[1] * u.eV).to(u.GeV),
             'spectrum':  (auger2013[2] * u.eV**2 * u.km**-2 * u.sr**-1 * u.yr**-1).to(u.GeV**2 * u.cm**-2 * u.sr**-1 * u.s**-1),
             'lower_err': (auger2013[3] * u.eV**2 * u.km**-2 * u.sr**-1 * u.yr**-1).to(u.GeV**2 * u.cm**-2 * u.sr**-1 * u.s**-1),
             'upper_err': (auger2013[4] * u.eV**2 * u.km**-2 * u.sr**-1 * u.yr**-1).to(u.GeV**2 * u.cm**-2 * u.sr**-1 * u.s**-1),}

auger2013 = convert_to_namedtuple(auger2013, name='auger2013')

# ------------------------------------------------------------------
# The Auger spectrum from ICRC 2015
# ------------------------------------------------------------------
# original data
auger2015 = np.array([
    [0  ,  17.55 , 7.77261e+37 , 4.95702e+35 , 4.95702e+35],
    [1  ,  17.65 , 7.35354e+37 , 6.10281e+35 , 6.10281e+35],
    [2  ,  17.75 , 6.91306e+37 , 7.48084e+35 , 7.48084e+35],
    [3  ,  17.85 , 6.52020e+37 , 9.18827e+35 , 9.18827e+35],
    [4  ,  17.95 , 5.93006e+37 , 1.10845e+36 , 1.10845e+36],
    [5  ,  18.05 , 5.23461e+37 , 1.14606e+36 , 1.14606e+36],
    [6  ,  18.15 , 5.17890e+37 , 1.24445e+36 , 1.24445e+36],
    [7  ,  18.25 , 5.02043e+37 , 1.35472e+36 , 1.35472e+36],
    [8  ,  18.35 , 4.30996e+37 , 1.33088e+36 , 1.33088e+36],
    [9  ,  18.45 , 4.25363e+37 , 1.73898e+35 , 1.73898e+35],
    [10 ,  18.55 , 4.00527e+37 , 2.14540e+35 , 2.14540e+35],
    [11 ,  18.65 , 3.85275e+37 , 2.38204e+35 , 2.38204e+35],
    [12 ,  18.75 , 3.87490e+37 , 3.03816e+35 , 3.03816e+35],
    [13 ,  18.85 , 4.30996e+37 , 4.10472e+35 , 4.10472e+35],
    [14 ,  18.95 , 4.72903e+37 , 5.45465e+35 , 5.45465e+35],
    [15 ,  19.05 , 5.19496e+37 , 7.21742e+35 , 7.21742e+35],
    [16 ,  19.15 , 5.54344e+37 , 9.36476e+35 , 9.36476e+35],
    [17 ,  19.25 , 5.64799e+37 , 1.19534e+36 , 1.19534e+36],
    [18 ,  19.35 , 5.62031e+37 , 1.50138e+36 , 1.50138e+36],
    [19 ,  19.45 , 5.62980e+37 , 1.88911e+36 , 1.88911e+36],
    [20 ,  19.55 , 5.71049e+37 , 2.40316e+36 , 2.40316e+36],
    [21 ,  19.65 , 4.16701e+37 , 2.58945e+36 , 2.58945e+36],
    [22 ,  19.75 , 3.10789e+37 , 2.70944e+36 , 2.70944e+36],
    [23 ,  19.85 , 1.98921e+37 , 3.04697e+36 , 3.04697e+36],
    [24 ,  19.95 , 5.75491e+36 , 1.81655e+36 , 1.81655e+36],
    [25 ,  20.05 , 5.07599e+36 , 3.32715e+36 , 1.98677e+36],
    [26 ,  20.15 , 1.99237e+36 , 3.31224e+36 , 1.18788e+36],
]).T

auger2015 = {'energy':    (10**auger2015[1] * u.eV).to(u.GeV),
             'spectrum':  (auger2015[2] * u.eV**2 * u.km**-2 * u.sr**-1 * u.yr**-1).to(u.GeV**2 * u.cm**-2 * u.sr**-1 * u.s**-1),
             'lower_err': (auger2015[3] * u.eV**2 * u.km**-2 * u.sr**-1 * u.yr**-1).to(u.GeV**2 * u.cm**-2 * u.sr**-1 * u.s**-1),
             'upper_err': (auger2015[4] * u.eV**2 * u.km**-2 * u.sr**-1 * u.yr**-1).to(u.GeV**2 * u.cm**-2 * u.sr**-1 * u.s**-1),}

auger2015 = convert_to_namedtuple(auger2015, name='auger2015')


# ------------------------------------------------------------------
# The Auger xmax distr. from ICRC 2015
# ------------------------------------------------------------------
Xmax2015 = np.array([
    [ 0, 17.80, 17.90, 17.850, 3768, 709.9, 1.2, 7.6, -10.2, 59.6,  1.7, 1.9, -1.7],
    [ 1, 17.90, 18.00, 17.949, 3383, 719.9, 1.4, 7.5, -10.2, 62.4,  2.1, 2.1, -1.8],
    [ 2, 18.00, 18.10, 18.048, 2818, 725.2, 1.5, 7.4, -10.2, 59.5,  2.0, 2.2, -1.9],
    [ 3, 18.10, 18.20, 18.148, 2425, 736.9, 1.8, 7.3, -10.1, 64.3,  2.6, 2.4, -2.1],
    [ 4, 18.20, 18.30, 18.247, 1952, 744.5, 2.0, 7.3,  -9.9, 66.4,  2.6, 2.6, -2.2],
    [ 5, 18.30, 18.40, 18.348, 1439, 748.0, 2.0, 7.3,  -9.7, 60.2,  2.8, 2.3, -2.0],
    [ 6, 18.40, 18.50, 18.447, 1139, 752.2, 2.1, 7.3,  -9.4, 53.3,  2.9, 2.1, -1.8],
    [ 7, 18.50, 18.60, 18.548,  814, 754.5, 2.2, 7.3,  -9.1, 53.5,  3.0, 1.9, -1.7],
    [ 8, 18.60, 18.70, 18.646,  575, 756.1, 2.7, 7.4,  -8.8, 54.5,  3.5, 1.7, -1.6],
    [ 9, 18.70, 18.80, 18.747,  413, 757.4, 2.8, 7.5,  -8.5, 45.8,  3.4, 1.5, -1.5],
    [10, 18.80, 18.90, 18.849,  297, 763.6, 2.9, 7.7,  -8.1, 42.8,  3.6, 1.4, -1.4],
    [11, 18.90, 19.00, 18.947,  230, 764.6, 3.2, 7.8,  -7.8, 43.4,  4.1, 1.3, -1.4],
    [12, 19.00, 19.10, 19.048,  165, 766.4, 3.3, 8.0,  -7.6, 39.0,  3.8, 1.3, -1.4],
    [13, 19.10, 19.20, 19.144,  114, 767.0, 3.6, 8.2,  -7.4, 36.7,  3.6, 1.3, -1.4],
    [14, 19.20, 19.30, 19.247,   87, 779.5, 5.1, 8.5,  -7.2, 46.4,  6.2, 1.2, -1.3],
    [15, 19.30, 19.40, 19.340,   63, 773.1, 5.0, 8.7,  -7.1, 40.1,  4.8, 1.3, -1.4],
    [16, 19.40, 19.50, 19.447,   40, 787.9, 9.6, 8.9,  -7.0, 53.2, 12.7, 1.3, -1.4],
    [17, 19.50, 20.00, 19.620,   37, 779.8, 5.0, 9.4,  -6.9, 26.5,  4.8, 1.5, -1.6],
]).T

Xmax2015 = {'energy':      (10**Xmax2015[3] * u.eV).to(u.GeV),
            'energy_Low':  (10**Xmax2015[3] * u.eV).to(u.GeV) - (10**Xmax2015[1] * u.eV).to(u.GeV),
            'energy_Up':   (10**Xmax2015[2] * u.eV).to(u.GeV) - (10**Xmax2015[3] * u.eV).to(u.GeV),
            'Xmax':        (Xmax2015[5] * u.g * u.cm**-2),
            'statXmax':    (Xmax2015[6] * u.g * u.cm**-2),
            'sysXmax_Low': (Xmax2015[7] * u.g * u.cm**-2),
            'sysXmax_Up':  (Xmax2015[8] * u.g * u.cm**-2),
            'XRMS':        (Xmax2015[9] * u.g * u.cm**-2),
            'statXRMS':    (Xmax2015[10] * u.g * u.cm**-2),
            'sysXRMS_Low': (Xmax2015[11] * u.g * u.cm**-2),
            'sysXRMS_Up':  (Xmax2015[12] * u.g * u.cm**-2),
           }

Xmax2015 = convert_to_namedtuple(Xmax2015, name='Xmax2015')

# ------------------------------------------------------------------
# TA spectrum from ICRC 2015 (combined spectrum)
# ------------------------------------------------------------------
import astropy.units as u
# original data
TA2015 = np.array([
    [15.65, 3.706e-23, 5.360e-25, 5.360e-25],
    [15.75, 1.893e-23, 2.535e-25, 2.535e-25],
    [15.85, 8.945e-24, 1.233e-25, 1.233e-25],
    [15.95, 4.393e-24, 6.369e-26, 6.369e-26],
    [16.05, 2.142e-24, 3.368e-26, 3.368e-26],
    [16.15, 1.041e-24, 1.813e-26, 1.813e-26],
    [16.25, 4.925e-25, 9.766e-27, 9.766e-27],
    [16.35, 2.468e-25, 5.478e-27, 5.478e-27],
    [16.45, 1.234e-25, 3.100e-27, 3.100e-27],
    [16.55, 6.363e-26, 1.333e-27, 1.333e-27],
    [16.65, 3.259e-26, 7.823e-28, 7.823e-28],
    [16.75, 1.549e-26, 4.440e-28, 4.440e-28],
    [16.85, 8.292e-27, 2.675e-28, 2.675e-28],
    [16.95, 4.138e-27, 1.576e-28, 1.576e-28],
    [17.05, 2.088e-27, 9.542e-29, 9.542e-29],
    [17.15, 1.102e-27, 5.787e-29, 5.787e-29],
    [17.25, 5.804e-28, 3.067e-29, 3.067e-29],
    [17.35, 2.594e-28, 1.378e-29, 1.378e-29],
    [17.45, 1.300e-28, 5.746e-30, 5.746e-30],
    [17.55, 6.221e-29, 2.262e-30, 2.262e-30],
    [17.65, 3.045e-29, 8.793e-31, 8.793e-31],
    [17.75, 1.394e-29, 3.528e-31, 3.528e-31],
    [17.85, 6.718e-30, 1.559e-31, 1.559e-31],
    [17.95, 3.178e-30, 7.435e-32, 7.435e-32],
    [18.05, 1.538e-30, 4.466e-32, 4.466e-32],
    [18.15, 6.909e-31, 2.501e-32, 2.501e-32],
    [18.25, 3.502e-31, 6.350e-33, 6.350e-33],
    [18.35, 1.630e-31, 2.691e-33, 2.691e-33],
    [18.45, 7.642e-32, 1.266e-33, 1.258e-33],
    [18.55, 3.569e-32, 6.481e-34, 6.481e-34],
    [18.65, 1.737e-32, 3.492e-34, 3.408e-34],
    [18.75, 8.397e-33, 1.976e-34, 1.976e-34],
    [18.85, 4.675e-33, 1.217e-34, 1.217e-34],
    [18.95, 2.520e-33, 7.633e-35, 7.633e-35],
    [19.05, 1.410e-33, 5.247e-35, 5.247e-35],
    [19.15, 7.511e-34, 3.429e-35, 3.429e-35],
    [19.25, 4.110e-34, 2.157e-35, 2.149e-35],
    [19.35, 2.196e-34, 1.383e-35, 1.392e-35],
    [19.45, 1.104e-34, 8.727e-36, 8.809e-36],
    [19.55, 5.769e-35, 5.624e-36, 5.624e-36],
    [19.65, 2.689e-35, 3.514e-36, 3.514e-36],
    [19.75, 1.874e-35, 2.651e-36, 2.642e-36],
    [19.85, 8.086e-36, 1.445e-36, 1.445e-36],
    [19.95, 1.515e-36, 5.128e-37, 7.453e-37],
    [20.05, 1.627e-36, 5.202e-37, 6.256e-37],
    [20.15, 1.615e-37, 9.838e-38, 2.719e-37],
    [20.25, 2.490e-37, 1.550e-37, 2.763e-37],
    [20.35, 0.000e+00, 0.000e+00, 1.262e-37],
]).T
    
TA2015 = {'energy':    (10**TA2015[0] * u.eV).to(u.GeV),
         'spectrum':  (TA2015[1] * u.eV**-1 * u.m**-2 * u.sr**-1 * u.s**-1).to(u.GeV**-1 * u.cm**-2 * u.sr**-1 * u.s**-1),
         'lower_err': (TA2015[2] * u.eV**-1 * u.m**-2 * u.sr**-1 * u.s**-1).to(u.GeV**-1 * u.cm**-2 * u.sr**-1 * u.s**-1),
         'upper_err': (TA2015[3] * u.eV**-1 * u.m**-2 * u.sr**-1 * u.s**-1).to(u.GeV**-1 * u.cm**-2 * u.sr**-1 * u.s**-1),}

TA2015['spectrum']  = TA2015['spectrum'] * TA2015['energy']**3
TA2015['lower_err'] = TA2015['lower_err'] * TA2015['energy']**3
TA2015['upper_err'] = TA2015['upper_err'] * TA2015['energy']**3

TA2015 = convert_to_namedtuple(TA2015, name='TA2015')


# ------------------------------------------------------------------
# IceCube cosmogenic neutrino limits TeVPA 2016 and ICRC 2017 
# ------------------------------------------------------------------

# IClimit2016 = np.loadtxt('../data/icecube_sensitivity.csv',delimiter=',').T

# IClimit2016 = {'energy': IClimit2016[0] * u.GeV,
#                'limit':  IClimit2016[1] * u.GeV**-1 * u.cm**-2 * u.s**-1 * u.sr**-1,
#               }
# IClimit2016['limit'] = IClimit2016['limit'] * IClimit2016['energy']**1

# IClimit2016 = convert_to_namedtuple(IClimit2016, name='IClimit2016')
import os.path as path
base = path.dirname(path.abspath(__file__))

IClimit2017 = np.loadtxt(path.join(base,'icecubelimit2017.csv'),delimiter=',').T

IClimit2017 = {'energy': IClimit2017[0] * u.GeV,
               'limit':  IClimit2017[1] * u.GeV**1 * u.cm**-2 * u.s**-1 * u.sr**-1,
              }

IClimit2017 = convert_to_namedtuple(IClimit2017, name='IClimit2017')